name: CI/CD
on:
  workflow_dispatch:
    inputs:
      needdeploy:
        description: 'Need to push to Docker Registry?'
        required: true
        default: '(Yes)'
        type: choice
        options:
        - (Yes)
        - (No)
  pull_request:
    branches: [master]
    types: [opened, reopened]
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      # - name: Run script from Scripts repo 
      #   run: ./.github/scripts/build.sh
      #   shell: bash
      - name: Checkout tools repo
        uses: actions/checkout@v3
        with:
           repository: cyberdanus/scripts
           path: scripts
      # - name: Download the script
      #   run: curl -o $PWD/script.sh https://raw.githubusercontent.com/cyberdanus/scripts/main/script.sh
      # - name: Give script permissions
      #   run: chmod +x $PWD/script.sh
      - name: Execute script
        # run: $PWD/script.sh env.txt
        run: echo "DOCKER_REPO=$(bash /home/runner/work/application/application/scripts/script.sh env.txt)" >> $GITHUB_ENV
      - name: Test
        run: echo ${{ env.DOCKER_REPO }}
        # run: |
        #   echo "docker_repo=$(./$PWD/script.sh)" >> $GITHUB_ENV
        #   echo "${{ env.docker_repo }}
      - name: Set short git commit SHA
        id: vars
        run: |
          calculatedSha=$(git rev-parse --short ${{ github.sha }})
          echo "::set-output name=short_sha::$calculatedSha"
      - name: Build and push
        if: github.event.inputs.needdeploy == '(Yes)'
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          tags: ${{ env.DOCKER_REPO }}:${{  steps.vars.outputs.short_sha  }}
      - name: Docker pull image
        if: github.event.inputs.needdeploy == '(Yes)'
        run: docker pull ${{ env.DOCKER_REPO }}:${{  steps.vars.outputs.short_sha  }}
      - name: Docker deploy latest image from Docker Registry
        if: github.event.inputs.needdeploy == '(Yes)'
        run: docker run -p 3000:3000 -d ${{ env.DOCKER_REPO }}:${{  steps.vars.outputs.short_sha  }}
      # - name: Slack Notification
      #   uses: rtCamp/action-slack-notify@v2
      #   env:
      #      SLACK_CHANNEL: messages
      #      SLACK_COLOR: ${{ job.status }} # or a specific color like 'good' or '#ff00ff'
      #      SLACK_ICON: https://github.com/rtCamp.png?size=48
      #      SLACK_MESSAGE: "GitHub build result: ${{ github.repository }}-${{ job.status }}\n${{ github.event.pull_request.html_url || github.event.head_commit.url }}"
      #      SLACK_TITLE: Notify
      #      SLACK_USERNAME: JobMONs
      #      SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
      - name: Slack Notification V2 bot
        id: slack
        uses: slackapi/slack-github-action@v1.23.0
        with:
          # The following message update step does not accept a channel name.
          # Setting a channel ID here for consistency is highly recommended.
          channel-id: "C04KEDRS2FM"
          payload: |
            {
              "text": "Deployment started (In Progress)",
              "attachments": [
                {
                  "pretext": "Deployment started",
                  "color": "dbab09",
                  "fields": [
                    {
                      "title": "Status",
                      "short": true,
                      "value": "In Progress"
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
      - uses: slackapi/slack-github-action@v1.23.0
        with:
          # Unlike the step posting a new message, this step does not accept a channel name.
          # Please use a channel ID, not a name here.
          channel-id: "C04KEDRS2FM"
          update-ts: ${{ steps.slack.outputs.ts }}
          payload: |
            {
              "text": "Deployment finished (Completed)",
              "attachments": [
                {
                  "pretext": "Deployment finished",
                  "color": "28a745",
                  "fields": [
                    {
                      "title": "Status",
                      "short": true,
                      "value": "Completed"
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
      - name: send telegram message on push
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message: |
            ${{ github.actor }} created commit:
            Commit message: ${{ github.event.commits[0].message }}
            
            Repository: ${{ github.repository }}
            Job status: ${{ job.status }}
            See changes: https://github.com/${{ github.repository }}/commit/${{github.sha}}